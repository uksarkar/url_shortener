package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"log"
	"strings"
	"url-shortener/internal/graph/gqmodel"
)

// ShortenURL is the resolver for the shortenURL field.
func (r *mutationResolver) ShortenURL(ctx context.Context, originalURL string) (*gqmodel.URL, error) {
	panic(fmt.Errorf("not implemented: ShortenURL - shortenURL"))
}

// Urls is the resolver for the urls field.
func (r *queryResolver) Urls(ctx context.Context) ([]*gqmodel.URL, error) {
	fields := r.GetRequestedFields(ctx)

	sqlFields := "id, original_url, short_url, created_at"
	if len(fields) > 0 {
		sqlFields = strings.Join(fields, ",")
	}

	// instead of select * should select only selected properties by the query
	rows, err := r.URLService.Repo.DB.Query(fmt.Sprintf("SELECT %s FROM urls LIMIT 10", sqlFields))
	if err != nil {
		log.Printf("Failed to query URLs: %v", err)
		return nil, err
	}
	defer rows.Close()

	// Create a slice to hold the results
	var urls []*gqmodel.URL

	// Iterate over the rows and populate the slice
	for rows.Next() {
		var url gqmodel.URL
		// Scan based on requested fields
		err := r.ScanFields(rows, &url, strings.Split(sqlFields, ", ")...)
		if err != nil {
			log.Printf("Failed to scan row: %v", err)
			return nil, err
		}
		urls = append(urls, &url)
	}

	// Check for errors from iterating over rows.
	if err = rows.Err(); err != nil {
		log.Printf("Row iteration error: %v", err)
		return nil, err
	}

	return urls, nil
}

// URL is the resolver for the url field.
func (r *queryResolver) URL(ctx context.Context, shortURL string) (*gqmodel.URL, error) {
	panic(fmt.Errorf("not implemented: URL - url"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
