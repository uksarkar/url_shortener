package gq_resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"url-shortener/internal/graph"
	"url-shortener/internal/graph/gqmodel"
)

// Links is the resolver for the Links field.
func (r *queryResolver) Links(ctx context.Context, pagination gqmodel.PaginationQuery, sort *gqmodel.SortBy, q *string) (*gqmodel.LinksResult, error) {
	fields := r.GetNestedFieldsOf(ctx, "data")
	return r.LinkService.Repo.Get(fields, pagination, sort, q)
}

// GetLink is the resolver for the getLink field.
func (r *queryResolver) GetLink(ctx context.Context, id int) (*gqmodel.Link, error) {
	return r.LinkService.Repo.Find(id)
}

// Domains is the resolver for the domains field.
func (r *queryResolver) Domains(ctx context.Context, pagination gqmodel.PaginationQuery, sort *gqmodel.SortBy, q *string) (*gqmodel.DomainsResult, error) {
	fields := r.GetNestedFieldsOf(ctx, "data")
	return r.DomainService.Repo.Get(fields, pagination, sort)
}

// GetDomain is the resolver for the getDomain field.
func (r *queryResolver) GetDomain(ctx context.Context, id int) (*gqmodel.Domain, error) {
	return r.DomainService.Repo.Find(id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, pagination gqmodel.PaginationQuery, sort *gqmodel.SortBy, q *string) (*gqmodel.UserResult, error) {
	fields := r.GetNestedFieldsOf(ctx, "data")
	return r.UserService.Repo.Get(fields, pagination, sort)
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id int) (*gqmodel.User, error) {
	return r.UserService.Repo.Find(id)
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
